// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	ptr "k8s.io/utils/ptr"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Route.
func (mg *Route) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.Service != nil {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.ForProvider.Service.ID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Service.IDRef,
			Selector:     mg.Spec.ForProvider.Service.IDSelector,
			To: reference.To{
				List:    &ServiceList{},
				Managed: &Service{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Service.ID")
		}
		mg.Spec.ForProvider.Service.ID = ptr.To(rsp.ResolvedValue)
		mg.Spec.ForProvider.Service.IDRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Service != nil {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: ptr.Deref(mg.Spec.InitProvider.Service.ID, ""),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.InitProvider.Service.IDRef,
			Selector:     mg.Spec.InitProvider.Service.IDSelector,
			To: reference.To{
				List:    &ServiceList{},
				Managed: &Service{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Service.ID")
		}
		mg.Spec.InitProvider.Service.ID = ptr.To(rsp.ResolvedValue)
		mg.Spec.InitProvider.Service.IDRef = rsp.ResolvedReference

	}

	return nil
}
