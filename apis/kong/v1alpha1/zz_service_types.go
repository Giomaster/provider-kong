// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceInitParameters_2 struct {

	// (List of String) Array of CA Certificate object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to null when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
	// Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
	CACertificates []*string `json:"caCertificates,omitempty" tf:"ca_certificates,omitempty"`

	// (Attributes) Certificate to be used as client certificate while TLS handshaking to the upstream server. (see below for nested schema)
	// +mapType=granular
	ClientCertificate map[string]*string `json:"clientCertificate,omitempty" tf:"client_certificate,omitempty"`

	// (Number) The timeout in milliseconds for establishing a connection to the upstream server.
	// The timeout in milliseconds for establishing a connection to the upstream server.
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// (Number) Unix epoch when the resource was created.
	// Unix epoch when the resource was created.
	CreatedAt *float64 `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (Boolean) Whether the Service is active. If set to false, the proxy behavior will be as if any routes attached to it do not exist (404). Default: true.
	// Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The host of the upstream server. Note that the host value is case sensitive.
	// The host of the upstream server. Note that the host value is case sensitive.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) The Service name.
	// The Service name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The path to be used in requests to the upstream server.
	// The path to be used in requests to the upstream server.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (Number) The upstream server port.
	// The upstream server port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tls_passthrough", "udp", "ws", "wss"]
	// The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tls_passthrough", "udp", "ws", "wss"]
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// (Number) The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
	// The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
	ReadTimeout *float64 `json:"readTimeout,omitempty" tf:"read_timeout,omitempty"`

	// (Number) The number of retries to execute upon failure to proxy.
	// The number of retries to execute upon failure to proxy.
	Retries *float64 `json:"retries,omitempty" tf:"retries,omitempty"`

	// (Boolean) Whether to enable verification of upstream server TLS certificate. If set to null, then the Nginx default is respected.
	// Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
	TLSVerify *bool `json:"tlsVerify,omitempty" tf:"tls_verify,omitempty"`

	// (Number) Maximum depth of chain while verifying Upstream server's TLS certificate. If set to null, then the Nginx default is respected.
	// Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
	TLSVerifyDepth *float64 `json:"tlsVerifyDepth,omitempty" tf:"tls_verify_depth,omitempty"`

	// (List of String) An optional set of strings associated with the Service for grouping and filtering.
	// An optional set of strings associated with the Service for grouping and filtering.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// only and is not returned in responses.
	// Helper field to set `protocol`, `host`, `port` and `path` using a URL. This field is write-only and is not returned in responses.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (Number) Unix epoch when the resource was last updated.
	// Unix epoch when the resource was last updated.
	UpdatedAt *float64 `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// (Number) The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
	// The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
	WriteTimeout *float64 `json:"writeTimeout,omitempty" tf:"write_timeout,omitempty"`
}

type ServiceObservation_2 struct {

	// (List of String) Array of CA Certificate object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to null when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
	// Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
	CACertificates []*string `json:"caCertificates,omitempty" tf:"ca_certificates,omitempty"`

	// (Attributes) Certificate to be used as client certificate while TLS handshaking to the upstream server. (see below for nested schema)
	// +mapType=granular
	ClientCertificate map[string]*string `json:"clientCertificate,omitempty" tf:"client_certificate,omitempty"`

	// (Number) The timeout in milliseconds for establishing a connection to the upstream server.
	// The timeout in milliseconds for establishing a connection to the upstream server.
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// (Number) Unix epoch when the resource was created.
	// Unix epoch when the resource was created.
	CreatedAt *float64 `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (Boolean) Whether the Service is active. If set to false, the proxy behavior will be as if any routes attached to it do not exist (404). Default: true.
	// Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The host of the upstream server. Note that the host value is case sensitive.
	// The host of the upstream server. Note that the host value is case sensitive.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The Service name.
	// The Service name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The path to be used in requests to the upstream server.
	// The path to be used in requests to the upstream server.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (Number) The upstream server port.
	// The upstream server port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tls_passthrough", "udp", "ws", "wss"]
	// The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tls_passthrough", "udp", "ws", "wss"]
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// (Number) The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
	// The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
	ReadTimeout *float64 `json:"readTimeout,omitempty" tf:"read_timeout,omitempty"`

	// (Number) The number of retries to execute upon failure to proxy.
	// The number of retries to execute upon failure to proxy.
	Retries *float64 `json:"retries,omitempty" tf:"retries,omitempty"`

	// (Boolean) Whether to enable verification of upstream server TLS certificate. If set to null, then the Nginx default is respected.
	// Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
	TLSVerify *bool `json:"tlsVerify,omitempty" tf:"tls_verify,omitempty"`

	// (Number) Maximum depth of chain while verifying Upstream server's TLS certificate. If set to null, then the Nginx default is respected.
	// Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
	TLSVerifyDepth *float64 `json:"tlsVerifyDepth,omitempty" tf:"tls_verify_depth,omitempty"`

	// (List of String) An optional set of strings associated with the Service for grouping and filtering.
	// An optional set of strings associated with the Service for grouping and filtering.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// only and is not returned in responses.
	// Helper field to set `protocol`, `host`, `port` and `path` using a URL. This field is write-only and is not returned in responses.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (Number) Unix epoch when the resource was last updated.
	// Unix epoch when the resource was last updated.
	UpdatedAt *float64 `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// (Number) The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
	// The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
	WriteTimeout *float64 `json:"writeTimeout,omitempty" tf:"write_timeout,omitempty"`
}

type ServiceParameters_2 struct {

	// (List of String) Array of CA Certificate object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to null when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
	// Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
	// +kubebuilder:validation:Optional
	CACertificates []*string `json:"caCertificates,omitempty" tf:"ca_certificates,omitempty"`

	// (Attributes) Certificate to be used as client certificate while TLS handshaking to the upstream server. (see below for nested schema)
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ClientCertificate map[string]*string `json:"clientCertificate,omitempty" tf:"client_certificate,omitempty"`

	// (Number) The timeout in milliseconds for establishing a connection to the upstream server.
	// The timeout in milliseconds for establishing a connection to the upstream server.
	// +kubebuilder:validation:Optional
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// (Number) Unix epoch when the resource was created.
	// Unix epoch when the resource was created.
	// +kubebuilder:validation:Optional
	CreatedAt *float64 `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (Boolean) Whether the Service is active. If set to false, the proxy behavior will be as if any routes attached to it do not exist (404). Default: true.
	// Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The host of the upstream server. Note that the host value is case sensitive.
	// The host of the upstream server. Note that the host value is case sensitive.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) The Service name.
	// The Service name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The path to be used in requests to the upstream server.
	// The path to be used in requests to the upstream server.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (Number) The upstream server port.
	// The upstream server port.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tls_passthrough", "udp", "ws", "wss"]
	// The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tls_passthrough", "udp", "ws", "wss"]
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// (Number) The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
	// The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
	// +kubebuilder:validation:Optional
	ReadTimeout *float64 `json:"readTimeout,omitempty" tf:"read_timeout,omitempty"`

	// (Number) The number of retries to execute upon failure to proxy.
	// The number of retries to execute upon failure to proxy.
	// +kubebuilder:validation:Optional
	Retries *float64 `json:"retries,omitempty" tf:"retries,omitempty"`

	// (Boolean) Whether to enable verification of upstream server TLS certificate. If set to null, then the Nginx default is respected.
	// Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
	// +kubebuilder:validation:Optional
	TLSVerify *bool `json:"tlsVerify,omitempty" tf:"tls_verify,omitempty"`

	// (Number) Maximum depth of chain while verifying Upstream server's TLS certificate. If set to null, then the Nginx default is respected.
	// Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
	// +kubebuilder:validation:Optional
	TLSVerifyDepth *float64 `json:"tlsVerifyDepth,omitempty" tf:"tls_verify_depth,omitempty"`

	// (List of String) An optional set of strings associated with the Service for grouping and filtering.
	// An optional set of strings associated with the Service for grouping and filtering.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// only and is not returned in responses.
	// Helper field to set `protocol`, `host`, `port` and `path` using a URL. This field is write-only and is not returned in responses.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (Number) Unix epoch when the resource was last updated.
	// Unix epoch when the resource was last updated.
	// +kubebuilder:validation:Optional
	UpdatedAt *float64 `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// (Number) The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
	// The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
	// +kubebuilder:validation:Optional
	WriteTimeout *float64 `json:"writeTimeout,omitempty" tf:"write_timeout,omitempty"`
}

// ServiceSpec defines the desired state of Service
type ServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceInitParameters_2 `json:"initProvider,omitempty"`
}

// ServiceStatus defines the observed state of Service.
type ServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Service is the Schema for the Services API. Service Resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,kong}
type Service struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.host) || (has(self.initProvider) && has(self.initProvider.host))",message="spec.forProvider.host is a required parameter"
	Spec   ServiceSpec   `json:"spec"`
	Status ServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceList contains a list of Services
type ServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Service `json:"items"`
}

// Repository type metadata.
var (
	Service_Kind             = "Service"
	Service_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Service_Kind}.String()
	Service_KindAPIVersion   = Service_Kind + "." + CRDGroupVersion.String()
	Service_GroupVersionKind = CRDGroupVersion.WithKind(Service_Kind)
)

func init() {
	SchemeBuilder.Register(&Service{}, &ServiceList{})
}
